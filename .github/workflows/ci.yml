# This is a basic workflow to help you get started with Actions

name: Test, CI & Deploy To Cloud

on:
  push:
    branches: [ "dev", "main" ]
  pull_request:
    branches: [ "dev", "main" ]

env: 
  APP_NAME: marine_flow
  PREFECT_API_KEY: ${{ secrets.PREFECT_API_KEY }}
  PREFECT_WORKSPACE: "weisshorn/weisshorn-marine"
  PREFECT_STATE: test
  FLOW_ENTRYPOINT: src.marine_flow.flow:marine_flow

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10"]
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    - name: Download and install poetry
      run: make download-poetry
    
    - name: Set up cache
      uses: actions/cache@v2.1.5
      with:
        path: ~/.cache/pypoetry/virtualenvs
        key: venv-${{ matrix.python-version }}-${{ hashFiles('pyproject.toml') }}-${{ hashFiles('poetry.lock') }}
    - name: Set Poetry Path
      run: |
        echo "$HOME/.poetry/bin" >> $GITHUB_PATH

    - name: Install dependencies
      run: |
        make install
    - name: Check and format style
      run: |
        make check-style
    - name: Analysing the code with pylint
      run: |
        make lint
    - name: Testing python with pytest
      run: |
        make testing
    - name: Build the poetry python image
      run: poetry build
    
    - name: Login to Prefect Cloud
      run: prefect cloud login --key $PREFECT_API_KEY
    
    - name: Configure workspace
      run: prefect cloud workspace set --workspace $PREFECT_WORKSPACE
    
    - name: Build Prefect Deployment
      run: prefect deployment build $FLOW_ENTRYPOINT -n $APP_NAME -q $PREFECT_STATE --skip-upload

    - name: Deploy
      run: prefect deployment apply ${APP_NAME}-deployment.yaml
      
      
  # deploy:
  #   needs: ["test"]
  #   runs-on: ubuntu-latest
    
  #   steps:
  #   - uses: actions/checkout@v3
    
      