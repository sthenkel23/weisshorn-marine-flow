# This is a basic workflow to help you get started with Actions

name: Test, CI & Deploy To Cloud

on:
  push:
    branches: [ "dev", "main" ]
  pull_request:
    branches: [ "dev", "main" ]

env: 
  APP_NAME: marine_flow
  PREFECT_API_KEY: ${{ secrets.PREFECT_API_KEY }}
  PREFECT_WORKSPACE: weisshorn/weisshorn-marine
  PREFECT_WORKSPACE_ID: ${{ secrets.PREFECT_WORKSPACE_ID }}
  PREFECT_QUEUE: dev
  PREFECT_TAG: etl
  PREFECT_ACCOUNT_ID: ${{ secrets.PREFECT_ACCOUNT_ID }}
  FLOW_ENTRYPOINT_ETL: pipeline_etl:etl_flow
  FLOW_ENTRYPOINT_ML: pipeline_ml:ml_training_flow

  # DOCKER_REGISTRY: weisshorn/marine
  HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
  HEROKU_APP_NAME: ${{ secrets.HEROKU_APP_NAME }}
  HEROKU_API_NAME: ${{ secrets.HEROKU_API_NAME }}

  FIREBASE_API_KEY: ${{ secrets.FIREBASE_SERVICE_ACCOUNT }}
  VERSION: latest
  BLOCK_STORAGE: github-storage


jobs:
  test-build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10"]
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}

    - name: Download and install poetry
      run: make download-poetry
    
    # - name: Set up cache
    #   uses: actions/cache@v2.1.5
    #   with:
    #     path: ~/.cache/pypoetry/virtualenvs
    #     key: venv-${{ matrix.python-version }}-${{ hashFiles('pyproject.toml') }}-${{ hashFiles('poetry.lock') }}

    - name: Set Poetry Path
      run: |
        echo "$HOME/.poetry/bin" >> $GITHUB_PATH

    - name: Install dependencies
      run: |
        make install

    - name: Check and format style
      run: |
        make check-style

    - name: Analysing the code with pylint
      run: |
        make lint

    - name: Testing python with pytest
      run: |
        make testing

    - name: Build the poetry python image
      run: poetry build

    - uses: actions/upload-artifact@v2
      with:
        name: dist
        path: ./dist

    # - name: Create profile
    #   run: |
    #    prefect profile create "profile-$APP_NAME"
    #    prefect profile use "profile-$APP_NAME"

    # - name: Prefect cloud configuration
    #   run:  |
    #     prefect config set PREFECT_API_URL="https://api.prefect.cloud/api/accounts/$PREFECT_ACCOUNT_ID/workspaces/$PREFECT_WORKSPACE"
    #     prefect config set PREFECT_API_KEY="$PREFECT_API_KEY"

    # #- name: Login to Prefect Cloud
    # #  run: prefect cloud login -k $PREFECT_API_KEY -w $PREFECT_WORKSPACE
    
    # - name: Configure workspace
    #   run: prefect cloud workspace set --workspace $PREFECT_WORKSPACE
    
    # - name: Build Prefect Deployment
    #   run: prefect deployment build $FLOW_ENTRYPOINT -n $APP_NAME -q $PREFECT_QUEUE

    # - name: Deploy
    #   run: prefect deployment apply ${APP_NAME}-deployment.yaml
      
  prefect-deploy:
    needs: test-build
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Set up Python 3.x
      uses: actions/setup-python@v4
      with:
        python-version: "3.x"

    - uses: actions/download-artifact@v2
      with:
        name: dist

    # use the --no-cache-dir flag to skip install files;
    # we don't need those for a one-time docker image build
    - name: Install dependencies
      run: |
        echo `ls`
        python -m pip install --upgrade pip --no-cache-dir
        pip install -r ./flows/requirements.txt --no-cache-dir
        pip install marine_flow-0.1.0-py3-none-any.whl

    - name: Create profile
      run: |
       prefect profile create "profile-$APP_NAME"
       prefect profile use "profile-$APP_NAME"

    - name: Prefect cloud configuration
      run:  |
        prefect config set PREFECT_API_URL="https://api.prefect.cloud/api/accounts/$PREFECT_ACCOUNT_ID/workspaces/$PREFECT_WORKSPACE_ID"
        prefect config set PREFECT_API_KEY="$PREFECT_API_KEY"


    #- name: Login to Prefect Cloud
    #  run: prefect cloud login -k $PREFECT_API_KEY -w $PREFECT_WORKSPACE
    
    - name: Configure workspace
      run: prefect cloud workspace set --workspace $PREFECT_WORKSPACE
      
    # These steps can be done manually for more control over the build process
    - name: Build and Apply Prefect deployments
      run: |
        cd flows/
        prefect deployment build $FLOW_ENTRYPOINT_ETL -n $APP_NAME-etl -q $PREFECT_QUEUE --apply -o ${APP_NAME}-etl-deployment # -sb github/$BLOCK_STORAGE # -t $PREFECT_TAG
        prefect deployment build $FLOW_ENTRYPOINT_ML -n $APP_NAME-ml -q $PREFECT_QUEUE --apply -o ${APP_NAME}-ml-deployment
  
  dockerize:
    needs: prefect-deploy
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Set up Python 3.x
      uses: actions/setup-python@v4
      with:
        python-version: "3.x"
    
    - uses: actions/download-artifact@v2
      with:
        name: dist
    
    - name: Set environment var needed for Docker
      run: |         
          echo "IMAGE=registry.heroku.com/$HEROKU_APP_NAME/worker" >> $GITHUB_ENV 
          echo "HEROKU_API_NAME=$HEROKU_API_NAME" >> $GITHUB_ENV
          echo $FIREBASE_API_KEY > ./flows/gcl.json

    - name: Build the Docker images
      run: |
          make docker IMAGE=${{ env.IMAGE }} VERSION=$VERSION \
                      HEROKU_API_NAME=${{ env.HEROKU_API_NAME }} \
                      PREFECT_API_KEY=$PREFECT_API_KEY \
                      PREFECT_ACCOUNT_ID=$PREFECT_ACCOUNT_ID \
                      PREFECT_WORKSPACE_ID=$PREFECT_WORKSPACE_ID \
                      PREFECT_QUEUE=$PREFECT_QUEUE \
                      FLOW_ENTRYPOINT_ETL=$FLOW_ENTRYPOINT_ETL \
                      FLOW_ENTRYPOINT_ML=$FLOW_ENTRYPOINT_ML 

    - name: Login to Heroku Container registry
      run: heroku container:login

    - name: Build and push
      run: | 
        docker push ${{ env.IMAGE }}:$VERSION



  heroku-deploy:
    needs: ["dockerize"]
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    - name: Heroku Release
      # run: heroku container:release -a $HEROKU_APP_NAME web
      run: |
        heroku container:release -a $HEROKU_APP_NAME worker
        heroku container:release -a $HEROKU_APP_NAME worker
    
      