# This is a basic workflow to help you get started with Actions

name: Test, CI & Deploy To Cloud

on:
  push:
    branches: [ "dev", "main" ]
  pull_request:
    branches: [ "dev", "main" ]

env: 
  APP_NAME: marine_flow
  PREFECT_API_KEY: ${{ secrets.PREFECT_API_KEY }}
  PREFECT_WORKSPACE: weisshorn/weisshorn-marine
  PREFECT_QUEUE: test
  PREFECT_TAG: etl
  PREFECT_ACCOUNT_ID: ${{ secrets.PREFECT_ACCOUNT_ID }}
  FLOW_ENTRYPOINT: flows.flow:marine_flow
  DOCKER_REGISTRY: weisshorn/marine
  VERSION: latest

jobs:
  test-build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10"]
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    - name: Download and install poetry
      run: make download-poetry
    
    - name: Set up cache
      uses: actions/cache@v2.1.5
      with:
        path: ~/.cache/pypoetry/virtualenvs
        key: venv-${{ matrix.python-version }}-${{ hashFiles('pyproject.toml') }}-${{ hashFiles('poetry.lock') }}
    - name: Set Poetry Path
      run: |
        echo "$HOME/.poetry/bin" >> $GITHUB_PATH

    - name: Install dependencies
      run: |
        make install

    - name: Check and format style
      run: |
        make check-style

    - name: Analysing the code with pylint
      run: |
        make lint

    - name: Testing python with pytest
      run: |
        make testing

    - name: Build the poetry python image
      run: poetry build

    # - name: Create profile
    #   run: |
    #    prefect profile create "profile-$APP_NAME"
    #    prefect profile use "profile-$APP_NAME"

    # - name: Prefect cloud configuration
    #   run:  |
    #     prefect config set PREFECT_API_URL="https://api.prefect.cloud/api/accounts/$PREFECT_ACCOUNT_ID/workspaces/$PREFECT_WORKSPACE"
    #     prefect config set PREFECT_API_KEY="$PREFECT_API_KEY"

    # #- name: Login to Prefect Cloud
    # #  run: prefect cloud login -k $PREFECT_API_KEY -w $PREFECT_WORKSPACE
    
    # - name: Configure workspace
    #   run: prefect cloud workspace set --workspace $PREFECT_WORKSPACE
    
    # - name: Build Prefect Deployment
    #   run: prefect deployment build $FLOW_ENTRYPOINT -n $APP_NAME -q $PREFECT_QUEUE

    # - name: Deploy
    #   run: prefect deployment apply ${APP_NAME}-deployment.yaml
      
  dockerize-deploy:
    needs: test-build
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Set up Python 3.x
      uses: actions/setup-python@v4
      with:
        python-version: "3.x"

    # use the --no-cache-dir flag to skip install files;
    # we don't need those for a one-time docker image build
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip --no-cache-dir
        pip install -r ./flows/requirements.txt --no-cache-dir
    - name: Login to Prefect Cloud
      run: prefect cloud login -k $PREFECT_API_KEY -w $PREFECT_WORKSPACE
    
    - name: Configure workspace
      run: prefect cloud workspace set --workspace $PREFECT_WORKSPACE
    
    # These steps can be done manually for more control over the build process
    - name: Build and Apply Prefect deployments
      run: |
        prefect deployment build $FLOW_ENTRYPOINT -n $APP_NAME -q $PREFECT_QUEUE # -t $PREFECT_TAG -sb gcs/$PREFECT_GCS_BLOCK_NAME
        prefect deployment apply ${APP_NAME}-deployment.yaml
    
    - name: Login to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build the Docker images
      run: |
          # export VERSION=$VERSION
          # docker-compose build
          make docker IMAGE=$DOCKER_REGISTRY VERSION=$VERSION \
                      PREFECT_API_KEY=$PREFECT_API_KEY \
                      PREFECT_ACCOUNT_ID=$PREFECT_ACCOUNT_ID \
                      PREFECT_WORKSPACE=$PREFECT_WORKSPACE \
                      PREFECT_QUEUE=$PREFECT_QUEUE
    
    - name: Build and push
      run: | 
        docker push $DOCKER_REGISTRY:$VERSION




  # deploy:
  #   needs: ["test"]
  #   runs-on: ubuntu-latest
    
  #   steps:
  #   - uses: actions/checkout@v3
    
      